name: Deploy Crisp App

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  dockertag: "0.2"
  crisprg: "crisprg"
  crispaks: "crispaks"
  crispsa: "crispsadsavitz"
  crispreg: "crispreg"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - name: Deploy Infrastructure
        run: |
          az group create --name $crisprg --location eastus2
          az group deployment create --resource-group $crisprg --template-file arm_templates/aks.json --parameters aks_cluster_name=$crispaks
          az group deployment create --resource-group $crisprg --template-file arm_templates/sa.json --parameters storage_account_name=$crispsa
          az group deployment create --resource-group $crisprg --template-file arm_templates/acr.json --parameters registry_name=$crispreg

      - name: Build Image
        run: |
          az acr login --name $crispreg
          docker build . --file Dockerfile --tag $crispreg.azurecr.io/crisp:$dockertag
          docker push $crispreg.azurecr.io/crisp:$dockertag

      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group $crisprg --name $crispaks --overwrite-existing

      - name: Set infrastructural secrets
        run: |
          kubectl get secret acrsecret >/dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Secret acrsecret does not exist. Creating it..."
            kubectl create secret docker-registry acrsecret --docker-server=crispreg.azurecr.io --docker-username=cfff6db8-6ea9-4769-a9c4-3f5f2caa71fb --docker-password=${{ secrets.AZURE_CLIENT_SECRET }} --docker-email=savitz.daniel@gmail.com
          else
            echo "Secret acrsecret already exists. Skipping creation."
          fi

          kubectl get secret crispsakey-secret >/dev/null 2>&1
          if [ $? -ne 0 ]; then
            crispsakey=$(az storage account keys list --resource-group $crisprg --account-name $crispsa --query '[0].value' --output tsv)
            echo "##[set-output name=crispsakey;]$crispsakey"
            kubectl create secret generic crispsakey-secret --from-literal=crispsakey=$crispsakey 
          else
            echo "Secret crispsakey-secret already exists. Skipping creation."
          fi

      - name: Create Crisp k8s deployment
        run: |
          #Performs some primitive templating
          sed -i "s:{{crispacr}}:$crispreg:" deployment.yaml
          sed -i "s:{{tag}}:$dockertag:" deployment.yaml
          sed -i "s:{{crispsa}}:$crispsa:" deployment.yaml
          kubectl delete -f deployment.yaml
          kubectl apply -f deployment.yaml

      - name: Test 
        run: |
          #runs a test by pushing a sample csv to the storage account using az copy and then verifies that it can download the corresponding parquet file. Then deletes the testing blobs
          wget -O azcopy.tar https://aka.ms/downloadazcopy-v10-linux
          tar -xf azcopy.tar --strip-components=1
          sudo mv azcopy /usr/local/bin/

          saskey=$(az storage account generate-sas --permissions acdlpruw --account-name $crispsa --services bqtf --resource-types sco --expiry 2024-07-30T00:00:00Z --output tsv)

          pathToCSV="test"
          csvFile="crisptest.csv"

          azcopy copy "$pathToCSV/$csvFile" "https://$crispsa.blob.core.windows.net/csv/$csvFile?$saskey"
          echo "the following is the list of csv files"
          az storage blob list --account-name $crispsa --container-name csv --output table
          echo "sleeping for 10 seconds for parquet processing..."
          sleep 10
          echo "the following is the list of parquet files"
          parquetFile=$(echo $csvFile | sed s/csv/parquet/g)
          az storage blob list --account-name $crispsa --container-name parquet --output table
          azcopy copy "https://$crispsa.blob.core.windows.net/parquet/$parquetFile?$saskey" .

          az storage blob delete --account-name $crispsa --container-name csv --name $csvFile
          az storage blob delete --account-name $crispsa --container-name parquet --name $parquetFile
          echo "the csv to parquet test was successful"

